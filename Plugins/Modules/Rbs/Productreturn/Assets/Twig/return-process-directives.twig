{% block rbsProductreturnShipmentLine %}
	{% block rbsProductreturnShipmentLineDetailsDefault %}
		<script type="text/ng-template" id="/rbsProductreturnShipmentLineDetailsDefault.tpl">
			<tr data-ng-class="{{ lineTrNgClass }}">
				<td>
					<div data-rbs-commerce-cart-line-visual="" data-product="line.product"></div>
				</td>
				<td>
					<div data-ng-hide="line.product">
						(= line.shipmentLine.designation =)
					</div>
					<div data-ng-show="line.product">
						<ul class="list-unstyled" data-ng-class="{'no-bottom-margin': !line.orderLine.options.axesInfo.length}">
							<li data-ng-bind="line.product.common.title"></li>
							<li data-ng-show="line.product.common.reference" data-ng-bind="line.product.common.reference"></li>
						</ul>
						<dl class="dl-inline-items no-bottom-margin" data-ng-if="line.orderLine.options.axesInfo.length">
							<dt data-ng-repeat-start="(index, axisInfo) in line.orderLine.options.axesInfo">(= axisInfo.name =)</dt>
							<dd data-ng-repeat-end="">(= axisInfo.value =)</dd>
						</dl>
					</div>
				</td>
				<td>
					<p>(= line.shipmentLine.quantity =)</p>
					<p data-ng-if="line.alreadyReturned > 0">
						<span data-ng-show="line.alreadyReturned >= line.shipmentLine.quantity">
							{{ i18n('m.rbs.productreturn.front.already_returned_product', ['ucf']) }}
						</span>
						<span data-ng-show="line.alreadyReturned < line.shipmentLine.quantity">
							{{ i18n('m.rbs.productreturn.front.already_returned_quantity', ['ucf', 'lab']) }}
							(= line.alreadyReturned =)
						</span>
					</p>
					<a href="javascript:;" data-ng-click="newReturnLine(shipmentIndex, lineIndex)"
						data-ng-hide="line.alreadyReturned >= line.shipmentLine.quantity || hasReturnLine(shipmentIndex, lineIndex) || isEditing()">
						{{ i18n('m.rbs.productreturn.front.return_product', ['ucf']) }}
					</a>
				</td>
				{% if showPrices %}
					<td class="price text-right">
						<div data-ng-show="line.orderLine && line.shipmentLine.quantity != 1" class="small">
							{% if parameters.displayPricesWithoutTax %}
								(= line.shipmentLine.quantity =)
								x
								(= line.orderLine.unitAmountWithoutTaxes | rbsFormatPrice:orderData.common.currencyCode =)
								<abbr class="tax-mode" title="{{ i18nAttr('m.rbs.catalog.front.without_tax') }}">
									{{ i18n('m.rbs.catalog.front.without_tax_abbr') }}
								</abbr>
							{% endif %}
							{% if parameters.displayPricesWithoutTax and parameters.displayPricesWithTax %}<br />{% endif %}
							{% if parameters.displayPricesWithTax %}
								(= line.shipmentLine.quantity =)
								x
								(= line.orderLine.unitAmountWithTaxes | rbsFormatPrice:orderData.common.currencyCode =)
							{% endif %}
						</div>
					</td>
					<td class="price text-right">
						<div class="line.orderLine">
							{% if parameters.displayPricesWithoutTax %}
								(= line.shipmentLine.quantity * line.orderLine.unitAmountWithTaxes | rbsFormatPrice:orderData.common.currencyCode =)
								<abbr class="tax-mode" title="{{ i18nAttr('m.rbs.catalog.front.without_tax') }}">
									{{ i18n('m.rbs.catalog.front.without_tax_abbr') }}
								</abbr>
							{% endif %}
							{% if parameters.displayPricesWithoutTax and parameters.displayPricesWithTax %}<br />{% endif %}
							{% if parameters.displayPricesWithTax %}
								(= line.shipmentLine.quantity * line.orderLine.unitAmountWithTaxes | rbsFormatPrice:orderData.common.currencyCode =)
							{% endif %}
						</div>
					</td>
				{% endif %}
			</tr>
		</script>
	{% endblock rbsProductreturnShipmentLineDetailsDefault %}

	{% block rbsProductreturnShipmentLineReturn %}
		<script type="text/ng-template" id="/rbsProductreturnShipmentLineReturn.tpl">
			<tr data-ng-show="hasReturnLine(shipmentIndex, lineIndex)" class="no-top-border" data-ng-class="{{ lineTrNgClass }}">
				<td></td>
				<td colspan="{{ columnCount - 1 }}">
					<div data-ng-repeat="(returnLineIndex, returnLine) in line.returnLines">
						<div class="panel panel-default">
							<div class="panel-body" data-ng-hide="isEditing(shipmentIndex, lineIndex, returnLineIndex)"
								data-rbs-productreturn-return-line-summary="">
							</div>
							<div class="panel-body" data-ng-hide="!isEditing(shipmentIndex, lineIndex, returnLineIndex)"
								data-rbs-productreturn-return-line-edition="" data-form-name="{{ lineFormName }}">
							</div>
						</div>
					</div>
				</td>
			</tr>
		</script>
	{% endblock rbsProductreturnShipmentLineReturn %}

	{% block rbsProductreturnShipmentLineFooter %}
		<script type="text/ng-template" id="/rbsProductreturnShipmentLineFooter.tpl">
			<tr data-ng-show="hasReturnLine(shipmentIndex, lineIndex)" class="no-top-border" data-ng-class="{{ lineTrNgClass }}">
				<td colspan="2"></td>
				<td colspan="{{ columnCount - 2 }}">
					<div data-ng-if="getLineRemainingQuantity(shipmentIndex, lineIndex)" data-ng-hide="isEditing()">
						{{ i18n('m.rbs.productreturn.front.remaining_quatity', ['ucf', 'lab']) }}
						(= getLineRemainingQuantity(shipmentIndex, lineIndex) =)<br />
						<a href="javascript:;" data-ng-click="newReturnLine(shipmentIndex, lineIndex)">
							{{ i18n('m.rbs.productreturn.front.return_remaining_quantity_for_other_reason', ['ucf']) }}
						</a>
					</div>
				</td>
			</tr>
		</script>
	{% endblock rbsProductreturnShipmentLineFooter %}
{% endblock rbsProductreturnShipmentLine %}

{% block rbsProductreturnReturnLine %}
	{% block rbsProductreturnReturnLineSummary %}
		<script type="text/ng-template" id="/rbsProductreturnReturnLineSummary.tpl">
			<button type="button" class="btn btn-sm btn-default pull-right" data-ng-disabled="isEditing()"
				data-ng-click="editLine(shipmentIndex, lineIndex, returnLineIndex)">
				{{ i18n('m.rbs.commerce.front.modify', ['ucf']) }}
			</button>
			<dl class="dl-horizontal no-top-margin no-bottom-margin">
				<dt>{{ i18n('m.rbs.productreturn.front.quantity_to_return', ['ucf']) }}</dt>
				<dd>(= returnLine.quantity =)</dd>
				<dt>{{ i18n('m.rbs.productreturn.front.return_reason', ['ucf']) }}</dt>
				<dd>(= getReasonById(returnLine.reason).title =)</dd>
				<dt data-ng-show="returnLine.precisions">{{ i18n('m.rbs.productreturn.front.precisions', ['ucf']) }}</dt>
				<dd data-ng-show="returnLine.precisions">
					<div data-rbs-max-height="70">
						<div class="long-string">(= returnLine.precisions =)</div>
					</div>
				</dd>
				<dt>{{ i18n('m.rbs.productreturn.front.attached_file', ['ucf']) }}</dt>
				<dd>(= returnLine.attachedFile ? "{{ i18n('m.rbs.generic.front.yes', ['ucf']) }}" : "{{ i18n('m.rbs.generic.front.no', ['ucf']) }}" =)</dd>
				<dt>{{ i18n('m.rbs.productreturn.front.preferred_processing_mode', ['ucf']) }}</dt>
				<dd>(= getProcessingModeById(returnLine.preferredProcessingMode).title =)</dd>
				<dt data-ng-show="canChooseOtherVariant(line, returnLine)">
					{{ i18n('m.rbs.productreturn.front.replacing_variant', ['ucf']) }}
				</dt>
				<dd data-ng-show="canChooseOtherVariant(line, returnLine)">
					(= returnLine.productData.common.title =)
				</dd>
			</dl>
		</script>
	{% endblock rbsProductreturnReturnLineSummary %}

	{% block rbsProductreturnReturnLineEdition %}
		<script type="text/ng-template" id="/rbsProductreturnReturnLineEdition.tpl">
			{% set requiredStarTitle = i18nAttr('m.rbs.simpleform.front.this_field_is_required', ['ucf']) %}
			{% set labelColClasses = 'col-sm-4 col-md-3 control-label' %}
			{% set fieldOffsetClasses = 'col-sm-offset-4 col-md-offset-3' %}
			{% set fieldColClasses = 'col-sm-8 col-md-9' %}
			{% set fieldIdPrefix = 'input_' ~ blockId ~ '_(= lineIndex =)_(= returnLineIndex =)' %}
			<form class="form-horizontal" name="{{ lineFormName }}">
				<div class="form-group" data-ng-class="{
						'has-error': {{ lineFormName }}.quantity.$invalid,
						'has-success': {{ lineFormName }}.quantity.$dirty && !{{ lineFormName }}.quantity.$invalid
					}">
					<label for="{{ fieldIdPrefix }}_quantity" class="{{ labelColClasses }}">
						<em class="required-symbol" title="{{ requiredStarTitle }}">*</em>
						{{ i18n('m.rbs.productreturn.front.quantity_to_return', ['ucf']) }}
					</label>
					<div class="{{ fieldColClasses }}">
						<select data-ng-show="getLineRemainingQuantity(shipmentIndex, lineIndex, returnLineIndex) > 1"
							id="{{ fieldIdPrefix }}_quantity" class="form-control" name="quantity"
							required="required" data-ng-model="returnLine.quantity"
							data-ng-options="q for q in getAvailableQuantities(shipmentIndex, lineIndex, returnLineIndex)">
						</select>
						<p data-ng-show="getLineRemainingQuantity(shipmentIndex, lineIndex, returnLineIndex) == 1"
							class="form-control-static">
							(= returnLine.quantity =)
						</p>
					</div>
				</div>
				<div class="form-group" data-ng-class="{
						'has-error': {{ lineFormName }}.reason.$invalid,
						'has-success': {{ lineFormName }}.reason.$dirty && !{{ lineFormName }}.reason.$invalid
					}">
					<label for="{{ fieldIdPrefix }}_reason" class="{{ labelColClasses }}">
						<em class="required-symbol" title="{{ requiredStarTitle }}">*</em>
						{{ i18n('m.rbs.productreturn.front.return_reason', ['ucf']) }}
					</label>
					<div class="{{ fieldColClasses }}">
						<select data-ng-show="processData.reasons.length > 1"
							id="{{ fieldIdPrefix }}_reason" class="form-control" name="reason"
							required="required" data-ng-model="returnLine.reason"
							data-ng-options="reason.id as reason.title for reason in processData.reasons">
						</select>
						<p data-ng-show="processData.reasons.length == 1" class="form-control-static">
							(= processData.reasons[0].title =)
						</p>
						<p class="text-danger" data-ng-show="returnLine.timeLimitExceeded"
							data-ng-bind-html="trustHtml(returnLine.timeLimitErrorMessage)"></p>
					</div>
				</div>
				<div class="form-group" data-ng-class="{
						'has-error': {{ lineFormName }}.precisions.$invalid,
						'has-success': {{ lineFormName }}.precisions.$dirty && !{{ lineFormName }}.precisions.$invalid
					}">
					<label for="{{ fieldIdPrefix }}_precisions" class="{{ labelColClasses }}">
						<em data-ng-if="getReasonById(returnLine.reason).requirePrecisions"
							class="required-symbol" title="{{ requiredStarTitle }}">*</em>
						{{ i18n('m.rbs.productreturn.front.precisions', ['ucf']) }}
					</label>
					<div class="{{ fieldColClasses }}">
						<textarea id="{{ fieldIdPrefix }}_precisions" class="form-control" name="precisions"
							data-ng-required="getReasonById(returnLine.reason).requirePrecisions"
							data-ng-model="returnLine.precisions"></textarea>
					</div>
				</div>
				<div class="form-group" data-ng-class="{
						'has-error': {{ lineFormName }}.attachedFile.$invalid,
						'has-success': {{ lineFormName }}.attachedFile.$dirty && !{{ lineFormName }}.attachedFile.$invalid
					}">
					<label for="{{ fieldIdPrefix }}_attachedFile" class="{{ labelColClasses }}">
						<em data-ng-if="getReasonById(returnLine.reason).requireAttachedFile"
							class="required-symbol" title="{{ requiredStarTitle }}">*</em>
						{{ i18n('m.rbs.productreturn.front.attach_file', ['ucf']) }}
					</label>
					<div class="{{ fieldColClasses }}">
						<input id="{{ fieldIdPrefix }}_attachedFile" type="file" name="attachedFile"
							data-ng-required="getReasonById(returnLine.reason).requireAttachedFile"
							data-ng-model="returnLine.attachedFile" data-rbs-productreturn-file-reader="" />
					</div>
				</div>
				<div class="form-group" data-ng-class="{
						'has-error': {{ lineFormName }}.preferredProcessingMode.$invalid,
						'has-success': {{ lineFormName }}.preferredProcessingMode.$dirty && !{{ lineFormName }}.preferredProcessingMode.$invalid
					}" data-ng-show="returnLine.reason">
					<label class="{{ labelColClasses }}">
						<em class="required-symbol" title="{{ requiredStarTitle }}">*</em>
						{{ i18n('m.rbs.productreturn.front.preferred_processing_mode', ['ucf']) }}
					</label>
					<div class="{{ fieldColClasses }}">
						<div data-ng-repeat="mode in getAvailableProcessingModes(returnLine.reason, line.product)"
							class="radio">
							<label>
								<input type="radio" name="preferredProcessingMode" data-ng-value="(= mode.id =)"
									data-ng-model="returnLine.preferredProcessingMode" data-ng-required="!value" />
								(= mode.title =)
							</label>
						</div>
						<div data-ng-if="canChooseOtherVariant(line, returnLine)">
							<div data-rbs-productreturn-variant-selector-container=""
								data-waiting-message="{{ i18n('m.rbs.productreturn.front.please_wait_loading_data', ['ucf']) }}">
							</div>
						</div>
					</div>
				</div>
				<div class="form-group no-bottom-margin">
					<div class="{{ fieldOffsetClasses }} {{ fieldColClasses }}">
						<button type="button" class="btn btn-default pull-right"
							data-ng-click="cancelLine(shipmentIndex, lineIndex, returnLineIndex)">
							<span class="glyphicon glyphicon-remove"></span>
							<span class="visible-md-inline visible-lg-inline">
								{{ i18n('m.rbs.productreturn.front.cancel_returning_this_product', ['ucf']) }}
							</span>
						</button>
						<button type="button" class="btn btn-primary"
							data-ng-disabled="!isLineValid(line, returnLine)"
							data-ng-click="validateLine(shipmentIndex, lineIndex, returnLineIndex)">
							<span class="glyphicon glyphicon-ok"></span>
							{{ i18n('m.rbs.productreturn.front.validate_returning_this_product', ['ucf']) }}
						</button>
					</div>
				</div>
			</form>
		</script>
	{% endblock rbsProductreturnReturnLineEdition %}

	{% block rbsProductreturnVariantSelectorContainer %}
		<script type="text/ng-template" id="/rbsProductreturnVariantSelectorContainer.tpl">
			<h3>{{ i18n('m.rbs.productreturn.front.select_variant', ['ucf']) }}</h3>

			<div class="row">
				<div class="col-sm-6">
					<div data-rbs-commerce-cart-line-visual="" data-product="returnLine.productData"></div>
				</div>
				<div class="col-sm-6">
					<div data-rbs-catalog-variant-selector="" data-product-data="returnLine.productData"
						data-ajax-data="data.productAjaxData" data-ajax-params="data.productAjaxParams">
					</div>

					<div data-ng-hide="returnLine.productData.stock.sku" class="alert warning">
						{{ i18n('m.rbs.catalog.front.please_configure_axes', ['ucf']) }}
					</div>
					<div data-ng-show="returnLine.productData.stock.sku" data-rbs-productreturn-product-availability=""
						data-product-data="returnLine.productData"></div>
				</div>
			</div>
		</script>
	{% endblock rbsProductreturnVariantSelectorContainer %}
{% endblock rbsProductreturnReturnLine %}

{% block rbsProductreturnReshipping %}
	{% block rbsProductreturnReshippingModes %}
		<script type="text/ng-template" id="/rbsProductreturnReshippingModes.tpl">
			<div class="panel panel-default">
				<div class="panel-body" data-ng-if="hasCategory('store')">
					<label>{{ i18n('m.rbs.commerce.front.store_delivery', ['ucf']) }}</label>
				</div>
				<div class="panel-body" data-ng-if="hasCategory('relay')">
					<label>{{ i18n('m.rbs.commerce.front.relay_delivery', ['ucf']) }}</label>
				</div>
				<div class="panel-body" data-ng-if="hasCategory('atHome')">
					<label>{{ i18n('m.rbs.commerce.front.at_home_delivery', ['ucf']) }}</label>
					<div data-rbs-productreturn-reshipping-at-home="" data-reshipping-data="returnData.reshippingData"
						data-user-id="accessorId" data-user-addresses="userAddresses"
						data-reshipping-mode-definitions="processData.reshippingModes.atHome"></div>
				</div>
			</div>
			<div class="clearfix"></div>
		</script>
	{% endblock rbsProductreturnReshippingModes %}

	{% block rbsProductreturnReshippingAtHome %}
		<script type="text/ng-template" id="/rbsProductreturnReshippingAtHome.tpl">
			<div data-ng-hide="reshippingData.edition">
				<div class="row">
					<div class="col-md-4">
						<address class="no-bottom-margin" data-ng-show="reshippingData.address">
							<strong>(= reshippingData.address.lines[0] =)</strong>
							<div data-ng-repeat="addressLine in reshippingData.address.lines track by $index"
								data-ng-show="!$first">(= addressLine =)</div>
						</address>
						<button class="btn btn-default" data-ng-click="editAddress()">
							{{ i18n('m.rbs.commerce.front.modify', ['ucf']) }}
						</button>
					</div>
					<div class="col-md-8">
						<div data-ng-hide="loadShippingModes || reshippingModeDefinitions.length">
							{{ i18n('m.rbs.commerce.front.no_shipping_mode_available', ['ucf']) }}
						</div>
						<div data-ng-repeat="reshippingModeDefinition in reshippingModeDefinitions track by $index">
							<img class="pull-right" data-ng-show="reshippingModeDefinition.presentation.visual"
								alt="(= reshippingModeDefinition.presentation.visual.alt =)"
								data-ng-src="(= reshippingModeDefinition.presentation.visual.detailThumbnail =)" src="" />
							<label>
								<input type="radio" data-ng-model="reshippingData.mode.id"
									data-ng-value="reshippingModeDefinition.common.id" />
								(= reshippingModeDefinition.common.title =)
							</label>
							<div class="small" data-ng-bind-html="trustHtml(reshippingModeDefinition.presentation.description)">
							</div>
							<div class="clearfix"></div>
						</div>
					</div>
				</div>
			</div>
			<div data-ng-show="reshippingData.edition">
				<div data-ng-show="userAddresses.length" class="row">
					<div data-ng-repeat-start="address in userAddresses" class="col-md-6 col-lg-4">
						<h3>(= address.common.name =)</h3>
						<address>
							<strong>(= address.lines[0] =)</strong>
							<div data-ng-repeat="line in address.lines track by $index" data-ng-show="!$first">
								(= line =)
							</div>
						</address>
						<p>
							<button type="button" class="btn btn-sm btn-primary"
								data-ng-click="selectUserAddress(address)" >
								{{ i18n('m.rbs.commerce.front.button_use_this_address', ['ucf']) }}
							</button>
						</p>
					</div>
					<div data-ng-if="($index % 3) == 2" class="clearfix visible-lg-block"></div>
					<div data-ng-repeat-end="" data-ng-if="($index % 2) == 1" class="clearfix visible-md-block"></div>
				</div>
				<div class="row">
					<div class="col-md-12">
						<div data-rbs-geo-address-editor="" data-address="reshippingData.address" data-accept-zones=""
							data-manage-name="(= userId ? 'optional' : 'none' =)" data-valid="reshippingData.addressIsValid">
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-sm-8 col-sm-offset-4 col-md-9 col-md-offset-3">
						<button type="button" class="btn btn-sm btn-primary" data-ng-click="useAddress()"
							data-ng-disabled="!reshippingData.addressIsValid">
							{{ i18n('m.rbs.commerce.front.button_use_this_address', ['ucf']) }}
						</button>
					</div>
				</div>
			</div>
		</script>
	{% endblock rbsProductreturnReshippingAtHome %}
{% endblock rbsProductreturnReshipping %}