<?php
namespace Change\Storage\Engines;

/**
 * @name \Change\Storage\Engines\LocalImageStorage
 */
class LocalImageStorage extends LocalStorage
{
	/**
	 * @var string
	 */
	protected $formattedPath;

	/**
	 * @param string $url
	 * @return null|string
	 */
	public function getPublicURL($url)
	{
		$info = parse_url($url);
		if (isset($info['query']))
		{
			return $this->baseURL . '/Imagestorage/' . $this->name . '/' . $this->getRelativeFormattedPath($info, '/');
		}
		return parent::getPublicURL($url);
	}

	/**
	 * @param array $info
	 * @param int $flags
	 * @return array
	 */
	public function url_stat($info, $flags)
	{
		if (isset($info['query']))
		{
			$formattedFilename = $this->getFormattedPath() . DIRECTORY_SEPARATOR . $this->getRelativeFormattedPath($info);
			if ((STREAM_URL_STAT_QUIET & $flags) === STREAM_URL_STAT_QUIET)
			{
				if (!file_exists($formattedFilename))
				{
					return false;
				}
			}
			return stat($formattedFilename);
		}
		return parent::url_stat($info, $flags);
	}

	/**
	 * @param $info
	 * @return string
	 */
	protected function getRelativeFormattedPath($info, $separator = DIRECTORY_SEPARATOR)
	{
		parse_str($info['query'], $query);
		$query += array('max-height' => 0, 'max-width' => 0);
		return $query['max-width'] . $separator  . $query['max-height'] . $info['path'];
	}

	public function stream_open($parsedUrl, $mode, $options, &$opened_path, &$context)
	{
		if (isset($parsedUrl['query']))
		{
			$this->dbPath = $this->buildDbPath($parsedUrl);
			$fileName = $this->getFormattedPath() . DIRECTORY_SEPARATOR . $this->getRelativeFormattedPath($parsedUrl);
			\Change\StdLib\File::mkdir(dirname($fileName));
			$this->resource = @fopen($fileName, $mode);
			return is_resource($this->resource);
		}
		return parent::stream_open($parsedUrl, $mode, $options, $opened_path, $context); // TODO: Change the autogenerated stub
	}

	public function stream_close()
	{
		parent::stream_close();
		if ($this->useDBStat && $this->updateDBStat)
		{
			$this->getStorageManager()->getStorageNames();

		}
	}

	/**
	 * @param string $formattedPath
	 */
	public function setFormattedPath($formattedPath)
	{
		$this->formattedPath = $formattedPath;
	}

	/**
	 * @return string
	 */
	public function getFormattedPath()
	{
		return $this->formattedPath;
	}

	/**
	 * @param array $parsedUrl
	 * @return bool
	 */
	public function unlink($parsedUrl)
	{
		return parent::unlink($parsedUrl);
	}
}